<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Ricardoz's Site</title><link>/</link><description>凌晨四点，我看海棠花未眠。</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>/logo.png</url><title>Ricardoz's Site</title><link>/</link></image><language>zh-CN</language><lastBuildDate>Thu, 19 May 2022 03:19:28 +0806</lastBuildDate><pubDate>Thu, 19 May 2022 03:19:28 +0806</pubDate><item><title>Hello World!</title><link>/archives/typography/</link><description>&lt;div class="notice"&gt;这是一篇示例文章，在这里你可以看到常用页面元素的显示效果，同时也是 Markdown 语法的参考文章。保留或者删除本文，开始自己的创作吧！&lt;/div&gt;&lt;h2&gt;L2 Heading&lt;/h2&gt;
&lt;h3&gt;L3 Heading&lt;/h3&gt;
&lt;h4&gt;L4 Heading&lt;/h4&gt;
&lt;h5&gt;L5 Heading&lt;/h5&gt;
&lt;h6&gt;L6 Heading&lt;/h6&gt;
&lt;h2&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;We are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.&lt;/p&gt;
&lt;p&gt;We are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.&lt;/p&gt;
&lt;h2&gt;Inline elements&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Bold&lt;/strong&gt;, &lt;ruby&gt;Ruby&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ルビ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;, &lt;em&gt;Italic&lt;/em&gt;, &lt;del&gt;Strikethrough&lt;/del&gt;, &lt;a href="https://www.imalan.cn"&gt;Link&lt;/a&gt;&lt;sup id="fn_ref_1"&gt;&lt;a href="#fn_1"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2&gt;Blockquote and nested blockquote&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;安得广厦千万间，大庇天下寒士俱欢颜！风雨不动安如山。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;int a=1;&lt;/code&gt;. Code block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;List&lt;/h2&gt;
&lt;h3&gt;Unordered List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;iPhone&lt;ul&gt;
&lt;li&gt;iPhone X&lt;/li&gt;
&lt;li&gt;iPhone 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iPad&lt;/li&gt;
&lt;li&gt;MacBook&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ordered List&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打开冰箱&lt;ol&gt;
&lt;li&gt;右手放在冰箱门拉手上&lt;/li&gt;
&lt;li&gt;左手扶住冰箱主体&lt;/li&gt;
&lt;li&gt;右手向后用力&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;把大象放进冰箱&lt;/li&gt;
&lt;li&gt;关上冰箱&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Horizontal rule&lt;/h2&gt;
&lt;hr&gt;
&lt;h2&gt;Math&lt;/h2&gt;
&lt;p&gt;Inline Math: $m\times n$, math block:&lt;/p&gt;
&lt;p&gt;$$C_{m\times k}=A_{m\times n}\cdot B_{n\times k}$$&lt;/p&gt;
&lt;h2&gt;Figures&lt;/h2&gt;
&lt;h3&gt;Single figure&lt;/h3&gt;
&lt;p&gt;&lt;figure style="flex: 92.88888888888889" &gt;&lt;img width="836" height="450" src="/archives/assets/e0affbc80ccb2d596c87b520e37e7071.jpg" /&gt;&lt;figcaption&gt;Princess Mononoke&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;Photoset&lt;/h3&gt;
&lt;div class="photos"&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/archives/assets/4956a144888cdbbb6c2df1d1d15384b0.jpeg" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 50.03720238095238" &gt;&lt;img width="2690" height="2688" src="/archives/assets/4c66f0da616b08325b3aaa4c8b3f68e1.jpg" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/archives/assets/8b4d2334469ffa39b59e6fdb37c8c601.jpeg" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class="photos"&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/archives/assets/0f5023d542a33e7c9d270f3cd6a99562.jpeg" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/archives/assets/20ec69d2a0276336f95e11f42866d17f.jpeg" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/archives/assets/2b8af25285e5a193729a350593113bad.jpeg" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;h2&gt;Table&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;header&lt;/th&gt;
&lt;th&gt;header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cell 1&lt;/td&gt;
&lt;td&gt;cell 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cell 3&lt;/td&gt;
&lt;td&gt;cell 4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Link Card&lt;/h2&gt;
&lt;div class="links"&gt;
&lt;a style="display:block" target="_blank" href="https://www.imalan.cn" class="board-item"&gt;                 &lt;div class="board-thumb"&gt;&lt;img src="https://secure.gravatar.com/avatar/1741a6eef5c824899e347e4afcbaa75d?s=200&amp;r=G&amp;d="&gt;&lt;/div&gt;                 &lt;div class="board-title"&gt;AlanDecode&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;hr&gt;&lt;div class="footnotes"&gt;&lt;ol&gt;&lt;li id="fn_1"&gt;Home page for AlanDecode &lt;a no-style href="#fn_ref_1"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><author>hi@imalan.cn (AlanDecode)</author><guid isPermaLink="true">/archives/typography/</guid><pubDate>Wed, 18 Dec 2019 16:50:00 +0806</pubDate></item><item><title>我的第一篇文章</title><link>/archives/my-first-awesome-post/</link><description>&lt;p&gt;这是我的第一篇文章。文章使用 GitHub 管理，并通过 GitHub Actions 自动构建与发布！
&lt;figure style="flex: 92.88888888888889" &gt;&lt;img width="836" height="450" src="/archives/assets/e0affbc80ccb2d596c87b520e37e7071.jpg" /&gt;&lt;figcaption&gt;幽灵公主剧照&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
</description><author>hi@imalan.cn (华仔仔)</author><guid isPermaLink="true">/archives/my-first-awesome-post/</guid><pubDate>Sat, 16 May 2020 20:34:00 +0806</pubDate></item><item><title>爬取原神同人社的pljj照片</title><link>/archives/genshin/</link><description>&lt;p&gt;最近在学习python，然后看了我室友最近在看小说，就先看了几篇文章，然后爬了本他正在看的小说练练手。然后就有了这篇爬取原神同人社的pljj的照片，第一次写博客，大家多包涵包涵鸭！&lt;/p&gt;
&lt;p&gt;欢迎交流GitHub：Ricardo-Zzhao @&lt;a href="https://github.com/Ricardo-Zzhao"&gt;https://github.com/Ricardo-Zzhao&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;邮箱：ricardoz_y@qq.com&lt;/p&gt;
&lt;p&gt;博客：&lt;a href="https://mblog.ricardoz.site"&gt;Ricardoz's Site&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1.首先导入相关的模块&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jsonpath&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.页面分析&lt;/h2&gt;
&lt;p&gt;先打开&lt;a href="https://bbs.mihoyo.com/ys/home/29?type=hot"&gt;米游社·原神&lt;/a&gt;
&lt;figure style="flex: 68.42672413793103" &gt;&lt;img width="1270" height="928" src="https://img-blog.csdnimg.cn/20210423222301524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JpY2FyZG9zeWc=,size_16,color_FFFFFF,t_70" /&gt;&lt;/figure&gt;
找到热门部分，&lt;strong&gt;右击检查，network，ctrl+f8之后点击多回蓝色箭头&lt;/strong&gt;，找到下面接口，接口带有getForumPostList，请求拿到数据。
&lt;figure style="flex: 99.68684759916492" &gt;&lt;img width="955" height="479" src="https://img-blog.csdnimg.cn/20210423223314224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JpY2FyZG9zeWc=,size_16,color_FFFFFF,t_70" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 64.6112600536193" &gt;&lt;img width="964" height="746" src="https://img-blog.csdnimg.cn/20210423223327205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JpY2FyZG9zeWc=,size_16,color_FFFFFF,t_70" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;请求网站获取数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#构造请求头，把爬虫程序伪装成正常的浏览器用户&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./原神images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./原神images/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#创建保存图片的文件夹&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://bbs-api.mihoyo.com/post/wapi/getForumPostList?forum_id=29&amp;amp;gids=2&amp;amp;is_good=false&amp;amp;is_hot=true&amp;amp;page_size=20&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取网页参数
&lt;figure style="flex: 172.33333333333334" &gt;&lt;img width="517" height="150" src="https://img-blog.csdnimg.cn/20210424001944321.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;forum_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;29&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;gids&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;last_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;page_size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20&amp;#39;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;last_id: 代表这个数据最后一张图片相对于整个页面图片的位置编号
page_size: 代表这个数据总共有多少个图片&lt;/p&gt;
&lt;h2&gt;3.解析数据&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apparent_encoding&lt;/span&gt;
    &lt;span class="c1"&gt;#使python编码方式自动变化&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#输出status_code，观察网页变化&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#把字符串转换成json数据&lt;/span&gt;
    &lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jsonpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$..images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#使用jsonpath解析数据，获取所有图片的url，返回的是一个列表&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为requests的时候发现它是一个字典，可以使用Python中的键值索引方式获取到想要的数据，但这里使用了jsonpath解析数据，能够更快捷的获取想要的数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#遍历拿到每一个URL&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;
            &lt;span class="n"&gt;image_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
            &lt;span class="c1"&gt;#使用requests请求图片URL，获取图片数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用requests请求每张图片URL，获取图片数据&lt;/p&gt;
&lt;h2&gt;4.数据保存&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;下载完毕！！！&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5.成果展示&lt;/h2&gt;
&lt;p&gt;&lt;figure style="flex: 171.24505928853756" &gt;&lt;img width="1733" height="506" src="https://img-blog.csdnimg.cn/20210424003242887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JpY2FyZG9zeWc=,size_16,color_FFFFFF,t_70" /&gt;&lt;/figure&gt;
爬取成功啦！&lt;/p&gt;
&lt;h2&gt;6.完整代码&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jsonpath&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./原神images&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;请输入您想要爬取的页数：&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#构造请求头，把爬虫程序伪装成正常的浏览器用户&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./原神images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./原神images/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#创建保存图片的文件夹&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://bbs-api.mihoyo.com/post/wapi/getForumPostList?forum_id=29&amp;amp;gids=2&amp;amp;is_good=false&amp;amp;is_hot=true&amp;amp;page_size=20&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 资源包的url链接&lt;/span&gt;

&lt;span class="n"&gt;image_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;forum_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;29&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;gids&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;last_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;page_size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20&amp;#39;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apparent_encoding&lt;/span&gt;
    &lt;span class="c1"&gt;#使python编码方式自动变化&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#输出status_code，观察网页变化&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#把字符串转换成json数据&lt;/span&gt;
    &lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jsonpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$..images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#使用jsonpath解析数据，获取所有图片的url，返回的是一个列表&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#遍历拿到每一个URL&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;
            &lt;span class="n"&gt;image_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
            &lt;span class="c1"&gt;#使用requests请求图片URL，获取图片数据&lt;/span&gt;
            &lt;span class="n"&gt;image_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;image_name&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;下载完毕！！！&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;image_id&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;7.经验感想&lt;/h2&gt;
&lt;p&gt;今天是第一次写一篇博客，之前一直听说爬虫一项很厉害的技术，正好这学期学了python，就想着什么时候能够爬取一些东西。然后就去看了好几篇大佬的博客，这些代码有很多借鉴他们的地方，在这里想记录一点自己再互联网上留下的记忆，可能很多年过后，想起来自己还写过这样一篇博客。学习计算机我觉得真的要有很浓厚的兴趣，就像现在在学Hadoop，flume，hbase，hive等等，能记录下学习的过程，我觉得真的是一件很美好的事情。要是写的还不错记得点赞，关注，收藏，一键三连啦！阿里嘎多，米娜桑哇！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author：RicardoZ 
CSDN：&lt;a href="https://blog.csdn.net/Ricardosyg"&gt;https://blog.csdn.net/Ricardosyg&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description><author>hi@imalan.cn (华仔仔)</author><guid isPermaLink="true">/archives/genshin/</guid><pubDate>Sat, 24 Apr 2021 16:40:00 +0806</pubDate></item><item><title>Linux常用命令</title><link>/archives/linux/</link><description>&lt;p&gt;Linux常用命令
欢迎交流GitHub：Ricardo-Zzhao @&lt;a href="https://github.com/Ricardo-Zzhao"&gt;https://github.com/Ricardo-Zzhao&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;邮箱：ricardoz_y@qq.com&lt;/p&gt;
&lt;p&gt;博客：&lt;a href="https://mblog.ricardoz.site"&gt;Ricardoz's Site&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;（1）指令名称：pwd&lt;/h1&gt;
&lt;p&gt;pwd命令也是最常用最基本的命令之一，用于显示用户当前所在的目录。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 280.4878048780488" &gt;&lt;img width="460" height="82" src="https://img-blog.csdnimg.cn/9d99f7e0ba154ae3959b49270b25f2c5.png#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（2）指令名称：cd&lt;/h1&gt;
&lt;p&gt;cd命令不仅显示当前状态，还改变当前状态，它的用法跟dos下的cd命令基本一致。 
cd ..可进入上一层目录 
cd -可进入上一个进入的目录 
cd ~可进入用户的home目录
&lt;figure style="flex: 178.94736842105263" &gt;&lt;img width="408" height="114" src="https://img-blog.csdnimg.cn/f2e51629b7104d0bb4d6a0cccab0e1d3.png#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（3）指令名称：cp&lt;/h1&gt;
&lt;p&gt;使用方式： 
cp [options] source dest 
cp [options] source... directory 
说明：将一个档案拷贝至另一档案，或将数个档案拷贝至另一目录。&lt;/p&gt;
&lt;p&gt;范例： 
将档案 aaa 复制(已存在)，并命名为 bbb : 
cp aaa bbb 
将所有的C语言程式拷贝至 Finished 子目录中 : 
cp *.c Finished
&lt;figure style="flex: 345.39473684210526" &gt;&lt;img width="525" height="76" src="https://img-blog.csdnimg.cn/d1aa4842d7c14bce9a82af050c2ccac3.png#pic_center" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 196.61654135338347" &gt;&lt;img width="523" height="133" src="https://img-blog.csdnimg.cn/0984f607d2c7473394d8300d681cb2ad.png#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（4）名称：mv&lt;/h1&gt;
&lt;p&gt;使用方式：mv [options] source dest 
mv [options] source... directory 
说明：将一个档案移至另一档案，或将数个档案移至另一目录。 
参数：-i 若目的地已有同名档案，则先询问是否覆盖旧档。 
范例： 
将档案 aaa 更名为 bbb : 
mv aaa bbb 
将所有的C语言程序移至 Finished 子目录中 : 
mv -i *.c /Finished&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 134.4262295081967" &gt;&lt;img width="492" height="183" src="https://img-blog.csdnimg.cn/bbe43586652c438d971cc4571b6d78c7.png#pic_center" /&gt;&lt;figcaption&gt;在这里插入图片描述&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（5）指令名称 : chmod&lt;/h1&gt;
&lt;p&gt;使用方式 : chmod [-cfvR] [--help] [--version] mode file... 
说明 : Linux/Unix 的档案存取权限分为三级 : 档案拥有者、群组、其他。利用 chmod 可以藉以控制档案如何被他人所存取。&lt;/p&gt;
&lt;p&gt;mode : 权限设定字串，格式如下 : [ugoa...][+-=][rwxX]...][,...]，其中u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示增加权限、- 表示取消权限、= 表示唯一设定权限。
r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;范例 :将档案 file1.txt 设为所有人皆可读取 : 
chmod ugo+r file1.txt 
将档案 file1.txt 设为所有人皆可读取 : 
chmod a+r file1.txt 
将档案 file1.txt 与 file2.txt 设为该档案拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 : 
chmod ug+w,o-w file1.txt file2.txt 
将 ex1.py 设定为只有该档案拥有者可以执行 : 
chmod u+x ex1.py 
将目前目录下的所有档案与子目录皆设为任何人可读取 : 
chmod -R a+r * 
此外chmod也可以用数字来表示权限如 chmod 777 file 
语法为：chmod abc file 
其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。
r=4，w=2，x=1 
若要rwx属性则4+2+1=7； 
若要rw-属性则4+2=6；
若要r-x属性则4+1=7。
范例： 
chmod a=rwx file        和    chmod 777 file    效果相同 
chmod ug=rwx,o=x file   和    chmod 771 file    效果相同 
若用chmod 4755 filename可使此程式具有root的权限
&lt;figure style="flex: 258.7628865979381" &gt;&lt;img width="502" height="97" src="https://img-blog.csdnimg.cn/69feb178745844c994d52abed69fb58b.png#pic_center" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 542.7083333333334" &gt;&lt;img width="521" height="48" src="https://img-blog.csdnimg.cn/4825ca2fa75f403db774c1d47a97484e.png#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（6）指令名称 : ls&lt;/h1&gt;
&lt;p&gt;使用方式 : ls [-alrtAFR] [name...] 
说明 : 显示指定工作目录下之内容（列出目前工作目录所含之档案及子目录)。&lt;/p&gt;
&lt;p&gt;范例： 
列出目前工作目录下所有名称是 s 开头的档案，愈新的排愈后面 : 
ls -ltr s&lt;em&gt; 
将 /bin 目录以下所有目录及档案详细资料列出 : 
ls -lR /bin 
列出目前工作目录下所有档案及目录；目录于名称后加 "/", 可执行档于名称后加 "&lt;/em&gt;" : 
ls -AF 
&lt;figure style="flex: 168.4971098265896" &gt;&lt;img width="583" height="173" src="https://img-blog.csdnimg.cn/5a77d2e6dc28484b8b11ba486a732814.png#pic_center" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 306.06060606060606" &gt;&lt;img width="606" height="99" src="https://img-blog.csdnimg.cn/d86fe5ce452a4dc4b4a21bc273027457.png#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（7）指令名称：rm&lt;/h1&gt;
&lt;p&gt;使用方式：rm [options] name... 
说明：删除档案及目录。&lt;/p&gt;
&lt;p&gt;范例：
删除所有C语言程式档；删除前逐一询问确认 : 
rm -i *.c 
将 Finished 子目录及子目录中所有档案删除 : 
rm -r Finished 
&lt;figure style="flex: 420.90909090909093" &gt;&lt;img width="463" height="55" src="https://img-blog.csdnimg.cn/0bdaaaf06ef241d29d9d60d8274c14c0.png#pic_center" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 437.0689655172414" &gt;&lt;img width="507" height="58" src="https://img-blog.csdnimg.cn/03a5ff4b319b45db9c5e6d23b5f309ac.png#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（8）指令名称：rmdir&lt;/h1&gt;
&lt;p&gt;使用方式： rmdir [-p] dirName 
说明： 删除空的目录。 
参数： -p 是当子目录被删除后使它也成为空目录的话，则顺便一并删除。 
范例： 
将工作目录下，名为 AAA 的子目录删除 : 
rmdir AAA 
在工作目录下的 BBB 目录中，删除名为 Test 的子目录。若 Test 删除后，BBB 目录成为空目录，则 BBB 亦予删除。 
rmdir -p BBB/Test&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 421.9298245614035" &gt;&lt;img width="481" height="57" src="https://img-blog.csdnimg.cn/703e692640694e6892618c45923bdb68.png#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（9）指令名称：touch&lt;/h1&gt;
&lt;p&gt;使用方式： 
touch [-acfm] 
[-r reference-file] [--file=reference-file] 
[-t MMDDhhmm[CC]YY][.ss] 
[-d time] [--date=time] [--time={atime,access,use,mtime,modify}]
[--no-create] [--help] [--version] 
file1 [file2 ...] 
说明：
touch 指令改变档案的时间记录。 ls -l 可以显示档案的时间记录。
&lt;figure style="flex: 103.05755395683454" &gt;&lt;img width="573" height="278" src="https://img-blog.csdnimg.cn/ea8a4a8a30cc4ca692887eca1cdf9824.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljYXJkb1p6eno=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（10）指令名称：gzip&lt;/h1&gt;
&lt;p&gt;说明：gzip命令用于压缩文件。 
参数 ： -d 将压缩文件解压
范例：
如果要将ye.txt文件压缩，可用如下命令： 
gzip ye.txt 
这样就可以压缩文件并在文件名后面加上gz扩展名，变成文件ye.txt.gz。 
解压缩文件可用gzip -d命令实现： 
gzip -d ye.txt.gz 
这样就可以解压缩文件并删除gz扩展名。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 428.44827586206895" &gt;&lt;img width="497" height="58" src="https://img-blog.csdnimg.cn/248a7cdddbad4bba8aff7d8d1e26a2aa.png#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（11）指令名称：tar&lt;/h1&gt;
&lt;p&gt;说明：tar可以为文件和目录创建档案。利用tar，用户可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案，如软盘。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。&lt;/p&gt;
&lt;p&gt;范例：
可用如下方法建立tar档案： 
tar cvf 
例如，如果要将当前目录中所有文件存档到ye.tar中，可用如下命令： 
tar cvf ye.tar &lt;em&gt;.&lt;/em&gt; 
要浏览档案内容，将c选项变成t。如果要浏览ye.tar档案中的内容，可用如下命令： 
tar tvf ye.tar 
要取出档案内的内容，将c选项变成x。如果要将ye.tar档案中的内容取到当前目录中，可用如下命令： 
tar xvf ye.tar&lt;/p&gt;
&lt;p&gt;新版的tar可以直接访问和建立gzip压缩的tar档案，只要在tar命令中加上z 选项就可以了。例如： 
生成压缩档案ye.tar.gz ：
tar czvf ye.tar &lt;em&gt;.txt 
显示压缩档案ye.tar.gz的内容：
tar tzvf ye.tar &lt;/em&gt;.txt 
取出压缩档案ye.tar.gz的内容：
tar xzvf ye.tar *.txt 
&lt;figure style="flex: 91.69329073482429" &gt;&lt;img width="574" height="313" src="https://img-blog.csdnimg.cn/d6ce5175e26a463a8d6d27344180b1dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljYXJkb1p6eno=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 119.37984496124031" &gt;&lt;img width="616" height="258" src="https://img-blog.csdnimg.cn/38d58471b7ba4614bf12125c96bf5639.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljYXJkb1p6eno=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（12）指令名称：mail&lt;/h1&gt;
&lt;p&gt;使用方式：mail [-iInv] [-s subject] [-c cc-addr] [-b bcc-addr] user1 [user 2 ...] 
说明： 
mail 不仅只是一个指令， mail 还是一个电子邮件程序。&lt;/p&gt;
&lt;p&gt;参数：
s 邮件标题 
c 邮件地址 （2个地址以上用，一个地址不用加此参数）&lt;/p&gt;
&lt;p&gt;范例： 
①将信件送给一个或以上的电子邮件地址，由于没有加入其他的选项，使用者必须输入标题与信件的内容等。
mail user01@mcs.njnu.edu.cn
系统会提示输入“subject”
②将 mail.txt 的内容寄给yzhu@mcs.hpc.njnu.edu.cn ，同时抄送给root@mcs.hpc.njnu.edu.cn
mail -s “标题” -c yzhu@mcs.hpc.njnu.edu.cn  root@mcs.hpc.njnu.edu.cn &amp;lt;  mail.txt 
接收到的邮件都保存在目录 /var/spool/mail/用户名&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 335.2040816326531" &gt;&lt;img width="657" height="98" src="https://img-blog.csdnimg.cn/4587efbbb7e74d0ba2e80bf51d7582f9.png#pic_center" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 155.0" &gt;&lt;img width="713" height="230" src="https://img-blog.csdnimg.cn/3185aea2a4ed4a7097113a5528dac893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljYXJkb1p6eno=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 121.8213058419244" &gt;&lt;img width="709" height="291" src="https://img-blog.csdnimg.cn/cf4de1453333475bba8315cf53e5abcc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljYXJkb1p6eno=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（13）指令名称 : wall （选做）&lt;/h1&gt;
&lt;p&gt;使用方式 :
wall [ message ] 
使用说明： 
wall 会将讯息传给每一个 mesg 设定为 yes 的上线使用者。
例子 :
传讯息"hi" 给每一个使用者 : 
wall hi
&lt;figure style="flex: 127.5" &gt;&lt;img width="867" height="340" src="https://img-blog.csdnimg.cn/2733f03cd0554a308b87e8abd2ec72e5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljYXJkb1p6eno=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;（13）感悟&lt;/h1&gt;
&lt;p&gt;做完本次实验感觉还是有很多的收货的，原本对这些操作只是有点映像，现在对于这些操作更加的得心应手了，知道了mail和wall的用法，同时老师让我们看more，CJSON的源码，感觉对这些还是有点难度的，有点看不懂，希望在以后的学习中能过加强对这些的理解。&lt;/p&gt;
</description><author>hi@imalan.cn (华仔仔)</author><guid isPermaLink="true">/archives/linux/</guid><pubDate>Thu, 24 Mar 2022 16:40:00 +0806</pubDate></item><item><title>识途</title><link>/archives/shitu/</link><description>&lt;p&gt;妍望着手中初成的画稿，露出了连日来的第一个微笑……&lt;/p&gt;
&lt;p&gt;红，满目的红。红绸，红幔，红纱，红烛，还有着红衣的女子，一如她出嫁，他出征的那日。&lt;/p&gt;
&lt;p&gt;峨眉轻扫，朱砂点唇，素手挽发，眉目轻阖，敛去眸中的一丝忧愁，“刷——”灯盏亮起，点点火光映得女子素来清冷的眸子中也染上了几分暖色。东方尚未破晓，萦着湿冷气息的晨雾中，女子的身影慢慢向城门外移动着。风声烈烈，卷起漫漫黄沙，女子手提灯盏，任风卷起衣袂翩飞，身形丝毫未变，目光也始终落在不见半点人影的远方。就是今天了，今天是战胜的军队归来的日子。……&lt;/p&gt;
&lt;p&gt;妍望着这部名为《识途》的影片，眼中盈着点点星辉。&lt;/p&gt;
&lt;p&gt;妍与他都是在大院儿里长大的。毫不意外地，他走向了部队，成为了一名武警特战，和平年代距离死亡最近的人。&lt;/p&gt;
&lt;p&gt;第一次从部队归来的那日，他用军用越野车载着她兜风。妍望着他宽厚的肩背，想起那年坐在他的自行车后座，她搂着他，少年人的温度透过衬衫染上她的指尖。此时，坐在他的旁边的她忽然意识到，这样的肩背是可以依靠一辈子的。&lt;/p&gt;
&lt;p&gt;妍成了他的妻，成了一名军嫂。&lt;/p&gt;
&lt;p&gt;做个军嫂何其不易！&lt;/p&gt;
&lt;p&gt;妍习惯了在漫漫长夜里为在远方执行任务的他牵挂担忧，习惯了他不在的日子里事事要亲为。踩着梯子换灯泡时，她得时刻提防着摔倒，因为身后少了那可靠的肩背。他守候着国家这个大家，而她就要守好家庭这个小家。&lt;/p&gt;
&lt;p&gt;后悔吗？答案必然是否定的。他戴着奖章携着再升一级的荣耀归来时，给妍敬了一个标准的军礼。她记得那时他眼底的色彩，不似月的光辉，不似星的璀璨，是于时光深处最深最深的灯火……“男儿心如剑，只为天下舞”，从小就在家国情怀深重的大院儿里，打着靶子长大，守卫祖国的大好河山，护他人一世平安的观念已经融入了他的骨血。&lt;/p&gt;
&lt;p&gt;女子面容坚毅，一直望着路口，等啊等。浩荡的军队已经走过，其中没有他的身影。空荡荡的城门口，只余风声，却募地掺进了马儿的嘶鸣。马蹄声由远及近，她的眼中像有即将熄灭的火星骤得复燃……&lt;/p&gt;
&lt;p&gt;妍前些日子听到内部传来的消息，他此次去剿灭的边境线上的犯罪团伙的大头目已经被抓住，剩下的工作只是清除残党。相聚的日子该是不远了吧？正想着，手机铃声却突然响起。妍刚接起听了几个字，便失控的跌在地上，手机从掌中滑落，也全然未觉。电话那头的人，还在焦急地喊着:“嫂子，节哀啊……”而这头，只有声嘶力竭的哭声，撕心裂肺的咳声，整个空间都充斥压抑悲凉的氛围。&lt;/p&gt;
&lt;p&gt;影片还在兀自播放着，风吹雾散，归来的原只是一匹浴血战马。马背上披着一袭红袍，该骑在马背上的人却不见了踪影。点点未干涸的血液，顺着马身淌下，染得枯黄的草也成了血色，映得马背上的衣袍更加红艳。她认得那匹马啊，那是他的爱马，临阵受命的他，去时便是骑着这匹马。一切已然明了。等不回了，等不回征人了；归不来了，征人归不来了。&lt;/p&gt;
&lt;p&gt;妍在痛哭的时候，想起了很多事。想起临别前，他正气凛然的说:“这群歹徒为非作歹了很久，此番定然要将他们一网打尽。”那时，他的眼中有着势在必得的自信，妍给了他一个支持的拥抱。但她不知道的是，这次任务异常凶险，每一个前去的人都提早写好了遗书。“照顾好自己”，这是他走前留给她的最后一句话。他完成了任务，守住了国家这个大家，自己却告别了这个世界……&lt;/p&gt;
&lt;p&gt;影片的最后，女子素手一扬，宫灯应声坠地，卷起的火舌将纸罩缓缓吞噬。红袍落地，激起沙尘。原来，红衣之下竟是素衣。女子没有悲戚痛哭，依旧是直直站立着，迎着呼啸烈风，对着漫天黄沙，向着远方。一如他出征那日，她在落花纷飞的院里，望着他的离去。&lt;/p&gt;
&lt;p&gt;你若归来，我便红衣相迎，你若未至，我便素装引路。&lt;/p&gt;
&lt;p&gt;马识途，人未归，着素缟。这样无怨无悔、默默奉献的爱，穿越战火纷飞的年代，显得弥足珍贵……&lt;/p&gt;
&lt;p&gt;摆好画架，妍对着满山青翠，大喊一声“记得回来”。几笔黛色，一点新绿，眼前的景象慢慢在画纸上铺展开来。我所画的是你曾经倾尽心血守候的，希望你从另一个世界归来时，还能认得那些守护过的山河，识得归家的路途。既然你在遗书中让我好好活着，那我，便连带着你的那一份，将余生好好度过。我要走遍大山大河，绘下你守过的江山，绘下你回家的路途……妍心中这样想着，泪水却险些湿了画稿。&lt;/p&gt;
&lt;p&gt;妍将新成的画稿卷好，背着画架下山。“啊——！”不留神时踩空一级，妍将脚扭伤了。“你没事吧？”头顶传来了一个醇厚的声音。妍抬头望去，视线却募地撞上了一身军装……&lt;/p&gt;
</description><author>hi@imalan.cn (六佰)</author><guid isPermaLink="true">/archives/shitu/</guid><pubDate>Mon, 16 May 2022 01:40:00 +0806</pubDate></item><item><title>唐多令</title><link>/archives/tangduoling/</link><description>&lt;center&gt;唐多令·薇江南才女&lt;/center&gt;&lt;p&gt;&lt;center&gt;——赵小白&lt;/p&gt;
&lt;p&gt;江南一才女，笑靥两面红。更何人，羞似曲空。满腹经纶谈笑容，意如雄、自成风。&lt;/p&gt;
&lt;p&gt;吾亦随君卿，一见浮生轻。怎奈何，念念心心。江河聚流何曾倾，尘块莽、吾与君。&lt;/p&gt;
</description><author>hi@imalan.cn (华仔仔)</author><guid isPermaLink="true">/archives/tangduoling/</guid><pubDate>Mon, 16 May 2022 16:40:00 +0806</pubDate></item><item><title>Linux实验2</title><link>/archives/linux2/</link><description>&lt;p&gt;&lt;strong&gt;实验目的和要求：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程的基本概念及进程的结构Linux环境下进程的相关函数的应用守护进程的概念、启动和建立进程控制程序的编写&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验条件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、装有Linux操作系统的微型计算机；&lt;/p&gt;
&lt;h2&gt;实验过程&lt;/h2&gt;
&lt;p&gt;Liunx进程创建&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 134.62686567164178" &gt;&lt;img width="902" height="335" src="/archives/assets/66d1b538d4a0033988fc8849a7f2b1ea.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 115.07731958762886" &gt;&lt;img width="893" height="388" src="/archives/assets/1e86ec9a181b865fbd4d330834844cc1.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 145.03205128205127" &gt;&lt;img width="905" height="312" src="/archives/assets/67fd4b8e8d92dd1cb77cd4e3f46dd042.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 63.227146814404435" &gt;&lt;img width="913" height="722" src="/archives/assets/2ee49672c26ba473c070c87bf13eda07.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 64.35506241331484" &gt;&lt;img width="928" height="721" src="/archives/assets/49a0f24c84c3346aaaee04dc9f441991.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;僵尸进程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 62.67313019390582" &gt;&lt;img width="905" height="722" src="/archives/assets/3b09be559a21d2a468e9bcc79c163db8.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 132.38805970149255" &gt;&lt;img width="887" height="335" src="/archives/assets/5160ff9bb73dc36e93fd7ef0bfa94c34.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;守护进程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 64.0" &gt;&lt;img width="928" height="725" src="/archives/assets/f6b79d49d56af87041113d5dc4e4ce7e.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 44.390581717451525" &gt;&lt;img width="641" height="722" src="/archives/assets/3b44c5365caa6c503fe7bcd38fefc657.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;figure style="flex: 73.98703403565641" &gt;&lt;img width="913" height="617" src="/archives/assets/9bc25d66cc927c03c6895aea8c581916.png" /&gt;&lt;/figure&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**&lt;br&gt;
**&lt;/p&gt;
&lt;h2&gt;实验结果分析&lt;/h2&gt;
&lt;p&gt;1、熟悉并记录命令执行结果。&lt;/p&gt;
&lt;p&gt;2、写出自己的心得体会。3. 实验报告仅提供封面，不提供正文模板。实验报告要求如下：&lt;/p&gt;
&lt;p&gt;1）至少包含实验过程、实验结果、选择部分度量项目对结果进行简要解释。&lt;/p&gt;
&lt;p&gt;2）报告章节要组织合理。&lt;strong&gt;核心思想是：通过你的报告能够让初学者可以很快掌握Linux下的进程启动调用，类似做一个教程，当你把自己的成果放到百度文库，能够帮助更多的人。&lt;/strong&gt;&lt;/p&gt;
</description><author>hi@imalan.cn (华仔仔)</author><guid isPermaLink="true">/archives/linux2/</guid><pubDate>Thu, 19 May 2022 16:40:00 +0806</pubDate></item><item><title>Linux实验3</title><link>/archives/linux3/</link><description>&lt;p&gt;&lt;strong&gt;实验目的和要求：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1结合Linux系统调用进一步理解malloc2 学习内核模块编程技术3理解并实践内存缺页相关知识&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验条件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、装有Linux操作系统的微型计算机；&lt;/p&gt;
&lt;h2&gt;实验过程&lt;/h2&gt;
&lt;p&gt;1 操作系统的发展使得系统完成了大部分的内存管理工作。对于程序员而言，这些内存管理的过程完全透明不可见。因此，程序员开发时从不关心系统如何为自己分配内存，而且永远认为系统可以分配给程序所需要的内存。在程序开发时，程序员真正需要做的就是：申请内存、使用内存、释放内存，其他一概无需过问。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 81.80039138943249" &gt;&lt;img width="836" height="511" src="/archives/assets/1e023d1d3c99ce3844a65621c85f9184.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4&gt;在Linux 下，用malloc（）函数实现cat或copy命令。&lt;figure style="flex: 90.08838383838383" &gt;&lt;img width="1427" height="792" src="/archives/assets/0fea01486f943766e15b4652adc65bbb.png" /&gt;&lt;/figure&gt;实验2：编程环境&lt;/h4&gt;
&lt;p&gt;Ubuntu 16.04 LTS&lt;/p&gt;
&lt;h4&gt;什么是模块&lt;/h4&gt;
&lt;p&gt;内核模块的全称是动态可加载内核模块(Loadable Kernel Modul,KLM)，可以动态载入内核，让它成为内核代码的一部分。&lt;/p&gt;
&lt;p&gt;一个模块一般由一组函数和数据结构组成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hello.c代码&lt;/strong&gt;如下&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 97.58687258687259" &gt;&lt;img width="1011" height="518" src="/archives/assets/ef024fa17006291173df9eb4a3784955.png" /&gt;&lt;/figure&gt; &lt;strong&gt;Makefile代码&lt;/strong&gt;如下&lt;/p&gt;
&lt;p&gt;在&lt;figure style="flex: 128.81944444444446" &gt;&lt;img width="742" height="288" src="/archives/assets/6de0b8e77dc6bd32f5224e974d10695d.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在命令行输入：&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 323.75" &gt;&lt;img width="1036" height="160" src="/archives/assets/b2e513e0cb2fdc2f8a4dbb06e6ec6eb0.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;观察CR3寄存器&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 83.44051446945338" &gt;&lt;img width="1038" height="622" src="/archives/assets/6b5be6b002883d77d899e119b62e2674.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;实验结果分析&lt;/h2&gt;
&lt;p&gt;1、熟悉并记录命令执行结果。&lt;/p&gt;
&lt;p&gt;2、写出自己的心得体会。3. 实验报告仅提供封面，不提供正文模板。实验报告要求如下：&lt;/p&gt;
&lt;p&gt;1）至少包含实验过程、实验结果、选择部分度量项目对结果进行简要解释。&lt;/p&gt;
&lt;p&gt;2）报告章节要组织合理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心思想是：根据参考案例，结合教材，了解makefile。结合操作系统的知识，解读最后一个案例中cr3的返回值，并撰写实验报告。&lt;/strong&gt;&lt;/p&gt;
</description><author>hi@imalan.cn (华仔仔)</author><guid isPermaLink="true">/archives/linux3/</guid><pubDate>Thu, 19 May 2022 16:50:00 +0806</pubDate></item><item><title>Linux实验4</title><link>/archives/linux4/</link><description>&lt;p&gt;&lt;strong&gt;实验目的和要求：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1了解linux时钟中断的原理2 学习进程定时器技术&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验条件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、装有Linux操作系统的微型计算机；&lt;/p&gt;
&lt;h2&gt;实验过程&lt;/h2&gt;
&lt;p&gt;1 使用定时器的主要是为了周期性的执行某一任务，或者是到了一个指定时间去执行某一个任务。在工程实践中，一般有两个常见的比较有效的方法。一个是用linux内部的三个定时器，另一个是用sleep, usleep函数让进程睡眠一段时间，使用alarm定时发出一个信号，还有那就是用gettimeofday, difftime等自己来计算时间间隔，然后时间到了就执行某一任务，但是这种方法效率低，所以不常用。&lt;/p&gt;
&lt;h4&gt;Linux内置的3个定时器&lt;/h4&gt;
&lt;p&gt;Linux为每个任务安排了3个内部定时器：&lt;/p&gt;
&lt;p&gt;ITIMER_REAL：实时定时器，不管进程在何种模式下运行（甚至在进程被挂起时），它总在计数。定时到达，向进程发送SIGALRM信号。&lt;/p&gt;
&lt;p&gt;ITIMER_VIRTUAL：这个不是实时定时器，当进程在用户模式（即程序执行时）计算进程执行的时间。定时到达后向该进程发送SIGVTALRM信号。&lt;/p&gt;
&lt;p&gt;ITIMER_PROF：进程在用户模式（即程序执行时）和核心模式（即进程调度用时）均计数。定时到达产生SIGPROF信号。ITIMER_PROF记录的时间比ITIMER_VIRTUAL多了进程调度所花的时间。&lt;/p&gt;
&lt;p&gt;定时器在初始化是，被赋予一个初始值，随时间递减，递减至0后发出信号，同时恢复初始值。在任务中，我们可以一种或者全部三种定时器，但同一时刻同一类型的定时器只能使用一个。&lt;/p&gt;
&lt;p&gt;用到的函数有：&lt;/p&gt;
&lt;p&gt;#include \&amp;lt;sys/time.h&amp;gt;&lt;br&gt;
int getitimer(int which, struct itimerval *value);&lt;br&gt;
int setitimer(int which, struct itimerval*newvalue, struct itimerval* oldvalue);&lt;br&gt;
strcut timeval&lt;br&gt;
{&lt;br&gt;
long tv_sec; /*秒*/&lt;br&gt;
long tv_usec; /*微秒*/&lt;br&gt;
};&lt;br&gt;
struct itimerval&lt;br&gt;
{&lt;br&gt;
struct timeval it_interval; /*时间间隔*/&lt;br&gt;
struct timeval it_value; /*当前时间计数*/&lt;br&gt;
};&lt;/p&gt;
&lt;p&gt;it_interval用来指定每隔多长时间执行任务， it_value用来保存当前时间离执行任务还有多长时间。比如说， 你指定it_interval为2秒(微秒为0)，开始的时候我们把it_value的时间也设定为2秒（微秒为0），当过了一秒， it_value就减少一个为1， 再过1秒，则it_value又减少1，变为0，这个时候发出信号（告诉用户时间到了，可以执行任务了），并且系统自动把it_value的时间重置为it_interval的值，即2秒，再重新计数。&lt;/p&gt;
&lt;p&gt;我们的实验是使用Linux定时器，来检测进程的运行时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;必要的头文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 128.41726618705036" &gt;&lt;img width="357" height="139" src="/archives/assets/bf7ed7b9eba7409afeb7edcb72d611df.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Main函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 42.06939281288724" &gt;&lt;img width="679" height="807" src="/archives/assets/c70ff37fea7b4b345faac42afbfc1b9c.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信号处理函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 125.44910179640719" &gt;&lt;img width="838" height="334" src="/archives/assets/44d595718024874c0e052fe627232c4f.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送Alarm信号给进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 98.62068965517241" &gt;&lt;img width="858" height="435" src="/archives/assets/73fd9fae816da948bd7a0a252d27a70a.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;实验结果分析&lt;/h2&gt;
&lt;p&gt;1、熟悉并记录命令执行结果。&lt;/p&gt;
&lt;p&gt;2、写出自己的心得体会。3. 实验报告仅提供封面，不提供正文模板。实验报告要求如下：&lt;/p&gt;
&lt;p&gt;1）至少包含实验过程、实验结果、选择部分度量项目对结果进行简要解释。&lt;/p&gt;
&lt;p&gt;2）报告章节要组织合理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心思想是：根据参考案例，结合教材，了解makefile。结合操作系统的知识，你能进一步的结合man手册计算出进程的运行时间吗？&lt;/strong&gt;&lt;/p&gt;
</description><author>hi@imalan.cn (华仔仔)</author><guid isPermaLink="true">/archives/linux4/</guid><pubDate>Thu, 19 May 2022 16:51:00 +0806</pubDate></item><item><title>Linux实验5</title><link>/archives/linux5/</link><description>&lt;p&gt;&lt;strong&gt;实验目的和要求：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1了解Linux系统调用&lt;/p&gt;
&lt;p&gt;2仔细分析汇编代码调用系统调用的工作过程，特别是参数的传递方式等。&lt;/p&gt;
&lt;p&gt;3总结部分需要阐明自己对“系统调用的工作机制”的理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验条件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、装有Linux操作系统的微型计算机；&lt;/p&gt;
&lt;h2&gt;实验过程&lt;/h2&gt;
&lt;p&gt;系统调用的库函数就是读者使用的操作系统提供的 API（应用程序编程接口）， API 只是函数定义。系统调用是通过软中断向内核发出了中断请求， int 指令的执行就会触发一个中断请求。 libc 函数库定义的一些 API 内部使用了系统调用的封装例程，其主要目的是发布系统调用，使程序员在写代码时不需要用汇编指令和寄存器传递参数来触发系统调用。一般每个系统调用对应一个系统调用的封装例程，函数库再用这些封装例程定义出给程序员调用的 API，这样把系统调用最终封装成方便程序员使用的库函数。&lt;/p&gt;
&lt;p&gt;libc 提供的 API 可能直接提供一些用户态的服务，并不需要通过系统调用与内核打交道，比如一些数学函数等，但涉及与内核空间进行交互的 API 内部会封装系统调用。一个 API 可能只对应一个系统调用，也可能内部由多个系统调用实现，一个系统调用也可能被多个 API调用。不涉及与内核进行交互的 API 内部不会封装系统调用，比如用于求绝对值的数学函数abs()。对于返回值，大部分系统调用的封装例程返回一个整数，其值的含义依赖于对应的系统调用，返回值−1 在多数情况下表示内核不能满足进程的请求， libc 中进一步定义的 errno 变量包含特定的出错码。&lt;/p&gt;
&lt;p&gt;下面调用系统库函数 time()来获取系统的时间，即使用库函数 API time() 来获取系统&lt;/p&gt;
&lt;p&gt;当前时间作为一个范例，通过代码和实践来进一步理解和体会系统调用。接下来我们会&lt;/p&gt;
&lt;p&gt;通过系统库函数和直接使用嵌入式汇编代码两种方式，来触发同一个系统调用获取当前&lt;/p&gt;
&lt;p&gt;系统时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要求根据上述知识，结合课程内容设计一个time的系统调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br&gt;
参考解答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 85.79545454545455" &gt;&lt;img width="755" height="440" src="/archives/assets/5b0c25110143288efbc0df7bc47fc579.png" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验2 使用asm完成：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 124.27184466019418" &gt;&lt;img width="1024" height="412" src="/archives/assets/080d653fffaf51b4b11463d18bb92f0c.png" /&gt;&lt;/figure&gt;&lt;strong&gt;请结合上面的例子，实现rename的系统调用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提高部分（添加一个自定义的系统调用（全部完成可以获得附加分）&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;系统调用（System Call）是操作系统为在用户态运行的进程与硬件设备（如CPU、磁盘、打印机等）&lt;/p&gt;
&lt;p&gt;我们需要完成：&lt;/p&gt;
&lt;p&gt;下载最新版本的Linux内核源代码，在Linux系统中解压缩，大致观察内核源代码的组成结构。然后编译这个版本的内核代码，并尝试用编译出的内核重新引导系统。&lt;/p&gt;
&lt;p&gt;添加一个新的系统调用，完成任意一个功能，重新编译和运行内核，使新的系统调用可用。&lt;/p&gt;
&lt;p&gt;编写一个用户态的程序，使用增加的系统调用，以证明它确实可以用。&lt;/p&gt;
&lt;p&gt;开发环境：&lt;/p&gt;
&lt;p&gt;Linux 发行版 &lt;a href="http://www.linuxidc.com/topicnews.aspx?tid=2"&gt;Ubuntu&lt;/a&gt; 16.10&lt;/p&gt;
&lt;p&gt;Linux 内核版本 4.11.6&lt;/p&gt;
&lt;p&gt;虚拟机分配内存：4GB&lt;/p&gt;
&lt;p&gt;虚拟机分配空间：50GB SSD&lt;/p&gt;
&lt;p&gt;1.​ 在虚拟机上安装Ubuntu 16.10;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 63.10861423220974" &gt;&lt;img width="337" height="267" src="/archives/assets/56e878e1ad4f3d6b9a9a69800f3e5bb1.jpeg" /&gt;&lt;/figure&gt;1.png&lt;/p&gt;
&lt;p&gt;2. 进入Ubuntu系统，更新软件源代码.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo apt-get install update ​&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载编译过程中的所需的软件依赖包.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;sudo apt-get install libncurses5-dev libssl-dev&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo apt-get install build-essential openssl&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo apt-get install zlibc minizip&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo apt-get install libidn11-dev libidn11&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;4. 通过git下载Linux 内核 4.11.6.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;5.以root管理权限解压内核到 &lt;em&gt;/usr/src/&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo cd /usr/src&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo tar -xvf linux-4.11.6.tar.xz&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;6. Ubuntu安装Vim编辑器.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo apt-get install vim&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;7.用Vim打开&lt;em&gt;/kernel/sys.c&lt;/em&gt;文件，加入&lt;em&gt;linkage.h&lt;/em&gt;的头文件,在文件末尾加入要加入的系统调用函数.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo vim linux-4.11.6/kernel/sys.c&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 129.40074906367042" &gt;&lt;img width="691" height="267" src="/archives/assets/f907d841a172d622a49a51d088672903.jpeg" /&gt;&lt;/figure&gt;2.png&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 83.48115299334812" &gt;&lt;img width="753" height="451" src="/archives/assets/1d6f1eb916cccf3171d164195441877d.jpeg" /&gt;&lt;/figure&gt;3.png&lt;/p&gt;
&lt;p&gt;8.加入系统调用函数声明。在&lt;em&gt;linux-4.11.6/arch/x86/include/asm/syscalls.h&lt;/em&gt;中加入&lt;em&gt;asmlinkage void sys_quicksort(int [],int,int);&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo vim linux-4.11.6/arch/x86/include/asm/syscalls.h&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 82.96460176991151" &gt;&lt;img width="750" height="452" src="/archives/assets/ac7c74ba2bbc9baf487b86d328a25123.jpeg" /&gt;&lt;/figure&gt;4.png&lt;/p&gt;
&lt;p&gt;9.加入系统调用号。在&lt;em&gt;linux-4.11.6/arch/x86/entry/syscalls/syscall_64.tbl&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo vim linux-4.11.6/arch/x86/entry/syscalls/syscall_64.tbl&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 82.6710816777042" &gt;&lt;img width="749" height="453" src="/archives/assets/6fdc02c317e42d7bd4d4e62fa11f8fae.jpeg" /&gt;&lt;/figure&gt;5.png&lt;/p&gt;
&lt;p&gt;10. 编译内核和安装内核.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo make mrproper&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo make clean&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo make menuconfig&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;11. 根据自己处理器的最大线程数目来编译.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo make -j4&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;12. 编译后安装内核到系统中.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo make modules_install&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sudo make install&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;13. 重启加载内核.&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 65.0" &gt;&lt;img width="650" height="500" src="/archives/assets/5f2668cea8f20a99925771bb739e4687.jpeg" /&gt;&lt;/figure&gt;6.png&lt;/p&gt;
&lt;p&gt;14. 编写程序验证系统调用.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;#include\&amp;lt;stdio.h&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;#define QUICK_SORT 334&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;int main()&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;{&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;int i,a[]={9,20,36,10,1,2,6,4,5,8};&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;syscall(QUICK_SORT,a,0,9);&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;for(i=0;i\&amp;lt;10;i++)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;{&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;printf(“%d\t”,a[i]);&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;}&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;return 0;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;}&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;15. 编译C程序:&lt;/p&gt;
&lt;p&gt;gcc -o test test.c&lt;/p&gt;
&lt;p&gt;./test&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 195.12820512820514" &gt;&lt;img width="761" height="195" src="/archives/assets/1d815ad92d54c65da9435dd9e1c0007c.jpeg" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;.调用成功！&lt;/p&gt;
&lt;h2&gt;实验结果分析&lt;/h2&gt;
&lt;p&gt;1、熟悉并记录命令执行结果。&lt;/p&gt;
&lt;p&gt;2、写出自己的心得体会。3. 实验报告仅提供封面，不提供正文模板。实验报告要求如下：&lt;/p&gt;
&lt;p&gt;1）至少包含实验过程、实验结果、选择部分度量项目对结果进行简要解释。&lt;/p&gt;
&lt;p&gt;2）报告章节要组织合理。&lt;/p&gt;
</description><author>hi@imalan.cn (华仔仔)</author><guid isPermaLink="true">/archives/linux5/</guid><pubDate>Thu, 19 May 2022 16:52:00 +0806</pubDate></item></channel></rss>